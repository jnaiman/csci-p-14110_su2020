# from: http://wiki.tomabel.org/index.php?title=Gravitational_N-body_Problem
def acc(r,m,eps):
    a = np.zeros((len(r),3))
    for i in range(len(r)):
        for j in range(len(r)):
            ra2 = ((r[i,:]-r[j,:])**2).sum()
            if (i != j):
                a[i,:] += -(r[i,:]-r[j,:])*m[j]/(ra2**1.5) 
    return a # return acceleration
 
def Jerks(r,v,m,eps):
    Je = np.zeros((len(r),3))
    for i in range(len(r)):
        for j in range(len(r)):
            if (i != j):
                ra2 = ((r[i,:]-r[j,:])**2).sum() # dot product
                Je[i,:] += - ( (v[i,:]-v[j,:])/ra2**1.5  \
                     - 3.*(((v[i,:]-v[j,:])*(r[i,:]-r[j,:])).sum())/(ra2**2.5) *(r[i,:]-r[j,:]) )* m[j] 
    return Je;
 
def HermiteUpdate(dt, r, v, m):
    a = acc(r, m, 0)          # current acceleration
    adot = Jerks(r,v,m,0)     # current jerks
    rp = r + dt*v + dt**2/2 * a + dt**3/6* adot   # predict
    vp = v + dt*a + dt**2/2 * adot
    ap = acc(rp,m,0)          # predicted acceleration
    adotp = Jerks(rp,vp,m,0)  # predicted jerks 
    vp = v + dt/2*(a+ap) - dt**2/12*(adotp-adot)  # correct
    rp = r + dt/2*(v + vp) - dt**2/10 * (ap-a)
 
    return rp,vp
 
def CenterOfMass(r,m):
    CoM = np.zeros(3)
    Mtot= m.sum()
    for i in range(3):
        CoM[i] = (r[:,i]*m).sum()/Mtot
    return CoM
 
def CenterOfMassVelocity(v,m):
    vcom = np.zeros(3)
    Mtot= m.sum()
    for i in range(3):
        vcom[i] = (v[:,i]*m).sum()/Mtot
    return vcom
 
def PotentialEnergy(r,m):
    Phi = np.zeros(len(r))
    for i in range(len(r)):
        for j in range(len(r)):
            ra = math.sqrt(((r[i,:]-r[j,:])**2).sum())
            if (i != j):
                Phi[i] += -m[i]*m[j]/ra 
    return 0.5*Phi.sum()
 
def KineticEnergy(v,m):
    KE = 0.
    for i in range(3): 
        KE += 0.5*(m * (v[:,i]*v[:,i]) ).sum()
    return KE
 
N=len(masses) # number of bodies
m = np.ones(N)/N
m[N-1] = 1.0 # normalize by star's mass
for i in range(0,N-1):
    m[i]= masses[i]/masses[N-1]

# ok, now renormalize the positions by the "typical" length scale
l = 0.0
for i in range(0,N):
    l += np.sqrt( initial_positions[i,0]**2.+initial_positions[i,1]**2.+initial_positions[i,1]**2. )

# l = average distance
l /= N

r = initial_positions/l
r -= CenterOfMass(r,m)


# note: since G is in "real" units, we multiply l and initial velocities by "real" units
v = initial_velocities*kmincm/np.sqrt( G*masses.sum()/(l*AUinCM) )
v = v - CenterOfMassVelocity(v,m) # CoM does not move
 

tfinal = 20.5 # so, this is in weird N-body units: [l/sqrt( G*(M)/l )] where M = sum of all masses ~ star_mass
Nsteps = 880 # number of steps over for our integration
r_res = np.zeros((N,3,Nsteps))
v_res = np.zeros((N,3,Nsteps))
 
dt = tfinal/(Nsteps-1)  # fixed time steps
time = np.zeros(Nsteps)
r_res[:,:,0] = r.copy()
v_res[:,:,0] = v.copy()
Phi= np.zeros(Nsteps)
KE = np.zeros(Nsteps)
Phi[0] = PotentialEnergy(r,m)
KE[0]  = KineticEnergy(v,m)
for i in range(1,Nsteps):
    (r_res[:,:,i],v_res[:,:,i]) = HermiteUpdate(dt, r_res[:,:,i-1], v_res[:,:,i-1], m)
    time[i] = time[i-1] + dt
    Phi[i] = PotentialEnergy(r_res[:,:,i],m)
    KE[i]  = KineticEnergy(v_res[:,:,i],m)
 

# back into physical units
#r_res *= l/AUinCM
r_res *= l # into AU

# for 2nd particle
x_h = r_res[1,0,:]
y_h = r_res[1,1,:]

t_h = time*(l*AUinCM)/np.sqrt(G*masses.sum()/(l*AUinCM)) # units of time

e_h = Phi + KE
